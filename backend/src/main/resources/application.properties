# Application
spring.application.name=civilify

# Server
server.port=8081

# Firebase Configuration
firebase.database.url=${FIREBASE_DATABASE_URL}
firebase.project.id=${FIREBASE_PROJECT_ID}
firebase.service-account=${FIREBASE_SERVICE_ACCOUNT_FILE:civilify-a9de6-firebase-adminsdk-fbsvc-7a43e9e197.json}
firebase.api-key=${FIREBASE_API_KEY}

# CORS Configuration (for frontend development)
cors.allowed-origins=${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:5173,http://127.0.0.1:5173,http://127.0.0.1:3000}
cors.allowed-methods=${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
cors.allowed-headers=${CORS_ALLOWED_HEADERS:*}
cors.allow-credentials=${CORS_ALLOW_CREDENTIALS:true}

# Cloudinary Configuration
cloudinary.cloudName=${CLOUDINARY_CLOUD_NAME}
cloudinary.apiKey=${CLOUDINARY_API_KEY}
cloudinary.apiSecret=${CLOUDINARY_API_SECRET}
cloudinary.uploadPreset=${CLOUDINARY_UPLOAD_PRESET}

# Google OAuth2 Configuration
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=email,profile

# Disable JPA since we're using Firestore
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration

# Disable Spring Cloud GCP auto-configuration
spring.cloud.gcp.firestore.enabled=false
spring.cloud.gcp.core.enabled=false

# Logging (optional)
logging.level.org.springframework.web=INFO
logging.level.com.capstone.civilify=DEBUG

# JWT Configuration
jwt.secret=${JWT_SECRET:civilify-jwt-secret-key-should-be-very-long-and-secure-in-production}
# Default expiration: 7 days (604800000 milliseconds)
jwt.expiration=${JWT_EXPIRATION:604800000}

# OpenAI Configuration
# Default OpenAI settings (fallback)
openai.api.key=${OPENAI_API_KEY}
openai.model=${OPENAI_MODEL}
openai.organization=${OPENAI_ORG:}
openai.project=${OPENAI_PROJECT:}

# General Legal Information mode (A) settings - Optimized for Speed
openai.gli.api.key=${OPENAI_GLI_API_KEY}
openai.gli.model=${OPENAI_GLI_MODEL}
openai.gli.temperature=${OPENAI_GLI_TEMPERATURE:0.2}
openai.gli.top-p=${OPENAI_GLI_TOP_P:0.9}
openai.gli.frequency-penalty=${OPENAI_GLI_FREQUENCY_PENALTY:0.1}
openai.gli.presence-penalty=${OPENAI_GLI_PRESENCE_PENALTY:0.1}
openai.gli.max-tokens=${OPENAI_GLI_MAX_TOKENS:800}
openai.gli.stream=${OPENAI_GLI_STREAM:true}

# Case Plausibility Assessment mode (B) settings - Optimized for Accuracy
openai.cpa.api.key=${OPENAI_CPA_API_KEY}
openai.cpa.model=${OPENAI_CPA_MODEL}
openai.cpa.temperature=${OPENAI_CPA_TEMPERATURE:0.1}
openai.cpa.top-p=${OPENAI_CPA_TOP_P:0.8}
openai.cpa.frequency-penalty=${OPENAI_CPA_FREQUENCY_PENALTY:0.1}
openai.cpa.presence-penalty=${OPENAI_CPA_PRESENCE_PENALTY:0.1}
openai.cpa.max-tokens=${OPENAI_CPA_MAX_TOKENS:1500}
openai.cpa.stream=${OPENAI_CPA_STREAM:true}

# Knowledge Base Configuration (Law Entry Extension Integration) - PERFORMANCE OPTIMIZED
# Point Civilify to your deployed Villy service (Render) by default.
# Override via env var KNOWLEDGE_BASE_API_URL in other environments if needed.
knowledge.base.api.url=${KNOWLEDGE_BASE_API_URL:https://law-entry-extension.onrender.com/api}
knowledge.base.api.key=${KNOWLEDGE_BASE_API_KEY}
knowledge.base.timeout=${KNOWLEDGE_BASE_TIMEOUT:6000}
knowledge.base.retry.attempts=${KNOWLEDGE_BASE_RETRY_ATTEMPTS:2}
knowledge.base.retry.delay=${KNOWLEDGE_BASE_RETRY_DELAY:800}

# Retrieval tuning and safeguards - Optimized for Performance
knowledge.base.similarity.threshold=${KNOWLEDGE_BASE_SIMILARITY_THRESHOLD:0.20}
knowledge.base.confidence.threshold=${KNOWLEDGE_BASE_CONFIDENCE_THRESHOLD:0.15}
knowledge.base.max.results=${KNOWLEDGE_BASE_MAX_RESULTS:4}
knowledge.base.cache.ttl.seconds=${KNOWLEDGE_BASE_CACHE_TTL_SECONDS:300}
knowledge.base.query.min.length=${KNOWLEDGE_BASE_QUERY_MIN_LENGTH:2}
knowledge.base.simple.query.skip.sqg=${KNOWLEDGE_BASE_SIMPLE_QUERY_SKIP_SQG:true}

# Limit of sources that UI enrich step requests (default to max.results)
knowledge.base.sources.limit=${KNOWLEDGE_BASE_SOURCES_LIMIT:6}
# Enable KB by default; you can disable by setting KNOWLEDGE_BASE_ENABLED=false
knowledge.base.enabled=${KNOWLEDGE_BASE_ENABLED:true}

# Enhanced RAG features from Villy integration - Performance Optimized
knowledge.base.sqg.enabled=${KNOWLEDGE_BASE_SQG_ENABLED:true}
knowledge.base.sqg.model=${KNOWLEDGE_BASE_SQG_MODEL}
knowledge.base.sqg.cache.max=${KNOWLEDGE_BASE_SQG_CACHE_MAX:2000}
knowledge.base.sqg.ttl.ms=${KNOWLEDGE_BASE_SQG_TTL_MS:3600000}
knowledge.base.metadata.filtering.enabled=${KNOWLEDGE_BASE_METADATA_FILTERING_ENABLED:true}
knowledge.base.metadata.min.topics=${KNOWLEDGE_BASE_METADATA_MIN_TOPICS:2}

# Advanced RAG Performance Features
knowledge.base.cross.encoder.blend=${KNOWLEDGE_BASE_CROSS_ENCODER_BLEND:0.8}
knowledge.base.cross.encoder.cache.max=${KNOWLEDGE_BASE_CROSS_ENCODER_CACHE_MAX:2000}
knowledge.base.cross.encoder.ttl.ms=${KNOWLEDGE_BASE_CROSS_ENCODER_TTL_MS:1800000}
knowledge.base.early.termination.threshold=${KNOWLEDGE_BASE_EARLY_TERMINATION_THRESHOLD:0.80}
knowledge.base.embed.cache.max=${KNOWLEDGE_BASE_EMBED_CACHE_MAX:5000}
knowledge.base.embed.ttl.ms=${KNOWLEDGE_BASE_EMBED_TTL_MS:7200000}
knowledge.base.response.cache.max=${KNOWLEDGE_BASE_RESPONSE_CACHE_MAX:1000}
knowledge.base.response.ttl.ms=${KNOWLEDGE_BASE_RESPONSE_TTL_MS:1800000}
knowledge.base.rerank.mode=${KNOWLEDGE_BASE_RERANK_MODE:cross-encoder}
knowledge.base.rerank.model=${KNOWLEDGE_BASE_RERANK_MODEL}
knowledge.base.use.reranker=${KNOWLEDGE_BASE_USE_RERANKER:false}
knowledge.base.use.streaming=${KNOWLEDGE_BASE_USE_STREAMING:true}
knowledge.base.performance.logging=${KNOWLEDGE_BASE_PERFORMANCE_LOGGING:true}

